---
layout: post
title:  "New Electronics Project, Same As The Old Electronics Project"
date:   2020-10-05 22:11 -0500
categories: [blog,projects]
tags: [programming,electronics,arduino]
---

Today I started on a new ESP8266 project. That is, I started again on an old
ESP8266 project. It's just a simple garden monitor. It's intended to track
soil moisture, atmospheric conditions, and PM2.5, a measure of air quality. 
Unfortunately I've had to drop the PM2.5 sensor for reasons I'll get into
later.

![The ESP8266 on a breadboard](/assets/images/arduino_1.jpg)

First, I put the ESP8266 board (a NodeMCU clone) and a power supply on a 
breadboard. Simple stuff.

![The PM2.5 sensor, which I can't actually use yet.](/assets/images/arduino_2_pm2.5.jpg)

Here's the PM2.5 sensor I intended to use. It's from a company called
Keyestudio and is read over the analog pin. My ESP8266 only has one analog pin,
so in order to use more than one analog device you have to be a bit clever with
your circuit design.

I was following [this instructable](https://www.instructables.com/Multiple-Analog-Inputs-on-Only-One-Analoge-Pin/)
because I liked its simplicity. It simply uses diodes and a resistor to isolate 
the two inputs. Unfortunately, I don't have a diode kit, so I tried to get even
more hacky and use LEDs to stop the pixies from flowing the wrong way. This
didn't work very well. The ESP8266 accepts up to 1v on the analog pin, but the 
lowest-voltage LEDs I have require 2v. They still let some electricity by, but 
the data I was able to read was ultimately unusable. I'm guessing this is 
because the LEDs caused a voltage drop, which in turn madethe reading on the 
analog pin way lower than it should have been. When I order plain old diodes, 
I'm also going to try to find some 1v LEDs for kicks (and a real analog 
multiplexer just to be safe).

![The BME680](/assets/images/arduino_3_bme680.jpg)

This is the BME680. The chip itself is manufactured by Bosch. I can't recall
who made the breakout board. It's not on the board itself. The BME680 is a
versatile sensor package. It tracks temperature, humidity, barometric pressure,
and VOCs (volatile organic chemicals, like some gases, alcohols, etc.). The 
pressure sensor is sensitive enough to be used as an altimeter. My installation
will be stationary, so this isn't useful to me, but it is a neat fact. It
connects to the board via I2C or SPI. The library I've been trying to use to 
read data off the chip has been rather hard to understand for me. I haven't
yet managed to implement BME680 support, although I did manage to get it working
in a previous project, so I imagine if I do some digging I'll figure it out
again.

![Capacitive Soil Moisture Sensor](/assets/images/arduino_4_csms.jpg)

This is a capacitive soil moisture sensor. It simply measures the capacitance
of the whatever it's in contact with. When that material is soil, the 
capacitance of said soil can be used as a pretty good indicator of the moisture
level of the soil. It's a simple analog device, so it was super easy to set up
once I ditched the PM2.5 sensor. Because the analog pin is read as a 10 bit
unsigned integer, the possible readings range between 0 and 1023 (that is,
0000000000 to 1111111111). So we just divide by 1023 to get a percentage, right?
Well, no. More on that later.

![First Assembly](/assets/images/arduino_5_firstassembly.jpg)

Here's my first attempt at putting it all together. What a rat's nest! It also
just didn't work. I was absolutely befuddled, because the pinouts should have
been correct. Even when I pulled everything but the dev board off the breadboard
again, I couldn't flash anything. Pulling the NodeMCU off the breadboard allowed
me to flash a simple program, but it mysteriously quit working again once I put 
it back on the breadboard. Aha:

![Busted Breadboard](/assets/images/arduino_6_breadboardproblem.jpg)

A misaligned rail. That makes sense. In this case, it was bridging a 3v pin to a
ground pin. No wonder the ESP hated it! Unfortunately this also must have
tripped something inside my motherboard, because my PC *also* freaked out and 
shut off one of its USB controllers, which left me keyboard-less. Luckily this 
was easily remedied with a reboot.

![Partial Prototype](/assets/images/arduino_7_partialproto.jpg)

Having fixed that vexing problem, I reassembled the project. This is what I was 
left with. Still doesn't look great, but I can worry about aesthetics later.

![Serial Output](/assets/images/arduino_8_serialoutput.png)

The only thing I managed to get working was the soil moisture sensor. Remember
how I said the analog pin reads a 10-bit unsigned integer from 0-1023, but that
it wasn't as simple as dividing the input by 1023? The actual value output by
the sensor in ambient air isn't 0. it's between 700 and 800. And when the sensor
is submerged in water, it doesn't output 1023. It outputs somewhere around 400.
So not only is the range of the sensor smaller than the analog pin, it's 
inverted! I solved this by using a mapping function. 

When the unit is powered on, it enters a calibration mode where the user holds
the moisture sensor in the open air until an LED stops blinking, and then 
submerges the sensor in water, again waiting for the LED to stop blinking. The
8266 uses these readings to set a minimum and maximum value for the analog pin, 
and then maps those readings onto a scale from 0-100. The mapping function also
fixes the inverted values, meaning we get a nice pretty number between 0 and
100, with ambient air being 0 (at time of calibration, I haven't done extensive 
testing with changes in relative humidity, but I imagine that if there is a 
significant difference it should be possible to generate an offset with data 
from the RH sensor on the BME680) and a glass of tap water being 100 (again, I 
haven't done extensive testing, but my gut tells me water with more dissolved 
solids will be more conductive and thus skew the reading as well. I'll cross 
that bridge when I get to it.) Another problem: when the unit loses power, it 
forgets everything, so it has to calibrated every time it's powered on. I can
probably get around this by adding some kind of flash memory, but honestly I
don't know a whole lot about adding permanent storage to microcontrollers.

At some point, I'll throw the code up on Github under an open-source license 
(probably GPLv3). It's still extremely rudimentary stuff, though, and until I've
got a base level of functionality completed I'll be keeping the source to
myself. It's also pretty late, and I just can't be arsed to publish it right
now.

Thanks for reading.

TODO:
* get BME680 working
* get WiFi/MQTT working
* figure out an easy way to integrate this whole thing into HassIO
* add some permanent storage so that the unit doesn't need to be calibrated as often
* alternatively, go the Windows Mobile route and try to make sure the unit NEVER powers down completely

FAR-OUT TODO:
* design a custom circuit to get cost/power usage as low as possible
* slap a solar panel and a battery on the thing
* investigate BLE mesh as a solution for networking lots of these things 
together to enable tracking on a large scale (this one might necessitate
switching to something other than an ESP8266, I dunno)

-- Leland